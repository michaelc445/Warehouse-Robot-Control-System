/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package display.ui;

import display.initVisualizationTool;
import graph.Path;
import graph.PathFinder;
import graph.Point;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JList;
import main.Controller;
import static main.Main.warehouse;
import util.Parser;

/**
 *
 * @author art
 */
public class UserInterface extends javax.swing.JFrame {

    Parser parser = new Parser();
    
    String[] items = parser.parseItems("items.csv");
    
    Set<String> order = new HashSet<>();
    
    /**
     * Creates new form UserInterface
     */
    public UserInterface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        orderSystemPanel = new javax.swing.JPanel();
        orderSystemLabel = new javax.swing.JLabel();
        addItemButton = new javax.swing.JButton();
        removeItemButton = new javax.swing.JButton();
        processButton = new javax.swing.JButton();
        itemSelectComboBox = new javax.swing.JComboBox<>(items);
        jSeparator2 = new javax.swing.JSeparator();
        orderScrollPane = new javax.swing.JScrollPane();
        orderLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        itemListPanel = new javax.swing.JPanel();
        itemsLabel = new javax.swing.JLabel();
        itemListScrollPane = new javax.swing.JScrollPane(new JList(items));
        visualisationToolPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Warehouse Robotic Control System");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("mainFrame"); // NOI18N
        setSize(new java.awt.Dimension(600, 400));

        orderSystemPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        orderSystemPanel.setName("orderSystemPanel"); // NOI18N
        orderSystemPanel.setPreferredSize(new java.awt.Dimension(150, 400));

        orderSystemLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderSystemLabel.setText("Order System");

        addItemButton.setText("Add item");
        addItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemButtonActionPerformed(evt);
            }
        });

        removeItemButton.setText("Remove item");
        removeItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemButtonActionPerformed(evt);
            }
        });

        processButton.setText("Process");
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });

        itemSelectComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        itemSelectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSelectComboBoxActionPerformed(evt);
            }
        });

        orderLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderLabel.setText("Order");

        javax.swing.GroupLayout orderSystemPanelLayout = new javax.swing.GroupLayout(orderSystemPanel);
        orderSystemPanel.setLayout(orderSystemPanelLayout);
        orderSystemPanelLayout.setHorizontalGroup(
            orderSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderSystemPanelLayout.createSequentialGroup()
                .addGroup(orderSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(orderSystemPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(orderSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(orderSystemLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addItemButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(removeItemButton, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                            .addComponent(processButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(itemSelectComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator2)
                            .addComponent(orderScrollPane)
                            .addComponent(orderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(orderSystemPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jSeparator1)))
                .addContainerGap())
        );
        orderSystemPanelLayout.setVerticalGroup(
            orderSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderSystemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(orderSystemLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addItemButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeItemButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itemSelectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(orderLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orderScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(processButton)
                .addContainerGap())
        );

        getContentPane().add(orderSystemPanel, java.awt.BorderLayout.LINE_START);

        itemListPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        itemListPanel.setMinimumSize(new java.awt.Dimension(150, 100));
        itemListPanel.setName("itemsPanel"); // NOI18N

        itemsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        itemsLabel.setText("Items");

        javax.swing.GroupLayout itemListPanelLayout = new javax.swing.GroupLayout(itemListPanel);
        itemListPanel.setLayout(itemListPanelLayout);
        itemListPanelLayout.setHorizontalGroup(
            itemListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, itemListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(itemListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(itemListScrollPane)
                    .addComponent(itemsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))
                .addContainerGap())
        );
        itemListPanelLayout.setVerticalGroup(
            itemListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(itemsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itemListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(itemListPanel, java.awt.BorderLayout.LINE_END);

        visualisationToolPanel.setBorder(new javax.swing.border.MatteBorder(null));

        javax.swing.GroupLayout visualisationToolPanelLayout = new javax.swing.GroupLayout(visualisationToolPanel);
        visualisationToolPanel.setLayout(visualisationToolPanelLayout);
        visualisationToolPanelLayout.setHorizontalGroup(
            visualisationToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 292, Short.MAX_VALUE)
        );
        visualisationToolPanelLayout.setVerticalGroup(
            visualisationToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );

        getContentPane().add(visualisationToolPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemButtonActionPerformed
        String selectedItem = (String) itemSelectComboBox.getSelectedItem();
        order.add(selectedItem);
        updateOrderScrollPanel();
        System.out.printf("Added %s to order\n",(selectedItem));
    }//GEN-LAST:event_addItemButtonActionPerformed

    private void itemSelectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSelectComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemSelectComboBoxActionPerformed

    private void removeItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemButtonActionPerformed
        String selectedItem = (String) itemSelectComboBox.getSelectedItem();
        order.remove(selectedItem);
        updateOrderScrollPanel();
        System.out.printf("Removed %s from order\n",(selectedItem));
    }//GEN-LAST:event_removeItemButtonActionPerformed

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed
        if (order.isEmpty()){
            System.out.println("Empty order!");
        }
        else {
            launchController();
        }
    }//GEN-LAST:event_processButtonActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(() -> {
//            new UserInterface().setVisible(true);
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addItemButton;
    private javax.swing.JPanel itemListPanel;
    private javax.swing.JScrollPane itemListScrollPane;
    private javax.swing.JComboBox<String> itemSelectComboBox;
    private javax.swing.JLabel itemsLabel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel orderLabel;
    private javax.swing.JScrollPane orderScrollPane;
    private javax.swing.JLabel orderSystemLabel;
    private javax.swing.JPanel orderSystemPanel;
    private javax.swing.JButton processButton;
    private javax.swing.JButton removeItemButton;
    private javax.swing.JPanel visualisationToolPanel;
    // End of variables declaration//GEN-END:variables

    private void updateOrderScrollPanel() {
        orderScrollPane.removeAll();
        orderScrollPane.add(new JList(order.toArray()));
    }

    private void launchController() {
       ArrayList<Point> locationsToVisit;

        locationsToVisit = new ArrayList<>();

        //perform a database lookup to fetch item locations
        for (String item : order){
            locationsToVisit.add(warehouse.getItemLocation(item));
        }

        //calculate a path for the robot through the warehouse visiting all locations
        PathFinder pathFinder = new PathFinder();
        List<Path> shortestPath = pathFinder.findShortestPath(warehouse, locationsToVisit);

        //send this path to the visualization tool
        new initVisualizationTool(warehouse, shortestPath, locationsToVisit);
    }
}
