/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package display.ui;

import display.VisualizationTool;
import graph.Path;
import graph.PathFinder;
import graph.Point;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.SwingUtilities;
import static main.Main.warehouse;
import main.Warehouse;
import util.Parser;

/**
 *
 * @author art
 */
public class UserInterface extends javax.swing.JFrame {

    Parser parser = new Parser();
    
    String[] items = parser.parseItems("src/main/resources/items.csv");
    
    Set<String> order = new HashSet<>();
    
    /**
     * Creates new form UserInterface
     */
    public UserInterface() throws IOException {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel orderSystemPanel = new javax.swing.JPanel();
        javax.swing.JLabel orderSystemLabel = new javax.swing.JLabel();

        // Variables declaration - do not modify//GEN-BEGIN:variables
        javax.swing.JButton addItemButton = new javax.swing.JButton();
        javax.swing.JButton removeItemButton = new javax.swing.JButton();
        javax.swing.JButton processButton = new javax.swing.JButton();
        itemSelectComboBox = new javax.swing.JComboBox<>();
        javax.swing.JSeparator jSeparator2 = new javax.swing.JSeparator();
        javax.swing.JLabel orderLabel = new javax.swing.JLabel();
        javax.swing.JSeparator jSeparator1 = new javax.swing.JSeparator();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        orderListPanel = new javax.swing.JList<>();
        javax.swing.JPanel itemListPanel = new javax.swing.JPanel();
        javax.swing.JLabel itemsLabel = new javax.swing.JLabel();
        javax.swing.JScrollPane itemListScrollPane = new javax.swing.JScrollPane(new JList<>(items));
        visualisationPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Warehouse Robotic Control System");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("mainFrame"); // NOI18N
        setSize(new java.awt.Dimension(600, 400));

        orderSystemPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        orderSystemPanel.setName("orderSystemPanel"); // NOI18N
        orderSystemPanel.setPreferredSize(new java.awt.Dimension(150, 400));

        orderSystemLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderSystemLabel.setText("Order System");

        addItemButton.setText("Add item");
        addItemButton.addActionListener(this::addItemButtonActionPerformed);

        removeItemButton.setText("Remove item");
        removeItemButton.addActionListener(this::removeItemButtonActionPerformed);

        processButton.setText("Process");
        processButton.addActionListener(this::processButtonActionPerformed);

        itemSelectComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(items));
        itemSelectComboBox.addActionListener(this::itemSelectComboBoxActionPerformed);

        orderLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderLabel.setText("Order");

        jScrollPane1.setViewportView(orderListPanel);

        javax.swing.GroupLayout orderSystemPanelLayout = new javax.swing.GroupLayout(orderSystemPanel);
        orderSystemPanel.setLayout(orderSystemPanelLayout);
        orderSystemPanelLayout.setHorizontalGroup(
            orderSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderSystemPanelLayout.createSequentialGroup()
                .addGroup(orderSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, orderSystemPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jSeparator1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, orderSystemPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(orderSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(orderSystemLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addItemButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(removeItemButton, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                            .addComponent(processButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(itemSelectComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator2)
                            .addComponent(orderLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        orderSystemPanelLayout.setVerticalGroup(
            orderSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderSystemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(orderSystemLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addItemButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeItemButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itemSelectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(orderLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(processButton)
                .addContainerGap())
        );

        getContentPane().add(orderSystemPanel, java.awt.BorderLayout.LINE_START);

        itemListPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        itemListPanel.setMinimumSize(new java.awt.Dimension(150, 100));
        itemListPanel.setName("itemsPanel"); // NOI18N

        itemsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        itemsLabel.setText("Items");

        javax.swing.GroupLayout itemListPanelLayout = new javax.swing.GroupLayout(itemListPanel);
        itemListPanel.setLayout(itemListPanelLayout);
        itemListPanelLayout.setHorizontalGroup(
            itemListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, itemListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(itemListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(itemListScrollPane)
                    .addComponent(itemsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))
                .addContainerGap())
        );
        itemListPanelLayout.setVerticalGroup(
            itemListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(itemsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itemListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(itemListPanel, java.awt.BorderLayout.LINE_END);

        javax.swing.GroupLayout visualisationPanelLayout = new javax.swing.GroupLayout(visualisationPanel);
        visualisationPanel.setLayout(visualisationPanelLayout);
        visualisationPanelLayout.setHorizontalGroup(
            visualisationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 294, Short.MAX_VALUE)
        );
        visualisationPanelLayout.setVerticalGroup(
            visualisationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 406, Short.MAX_VALUE)
        );

        getContentPane().add(visualisationPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemButtonActionPerformed
        String selectedItem = (String) itemSelectComboBox.getSelectedItem();
        order.add(selectedItem);
        updateOrderScrollPanel();
        System.out.printf("Added %s to order\n",(selectedItem));
    }//GEN-LAST:event_addItemButtonActionPerformed

    private void itemSelectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSelectComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemSelectComboBoxActionPerformed

    private void removeItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemButtonActionPerformed
        String selectedItem = (String) itemSelectComboBox.getSelectedItem();
        order.remove(selectedItem);
        updateOrderScrollPanel();
        System.out.printf("Removed %s from order\n",(selectedItem));
    }//GEN-LAST:event_removeItemButtonActionPerformed

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed
        if (order.isEmpty()){
            System.out.println("Empty order!");
        }
        else {
            launchController();
        }
    }//GEN-LAST:event_processButtonActionPerformed

    private javax.swing.JComboBox<String> itemSelectComboBox;
    private javax.swing.JList<String> orderListPanel;
    private javax.swing.JPanel visualisationPanel;
    // End of variables declaration//GEN-END:variables

    private void updateOrderScrollPanel() {
        orderListPanel.removeAll();
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (String item : order) {
            listModel.addElement(item);
        }
        orderListPanel.setModel(listModel);
    }

    private void launchController() {
       ArrayList<Point> locationsToVisit;

        locationsToVisit = new ArrayList<>();

        //perform a database lookup to fetch item locations
        for (String item : order){
            locationsToVisit.add(warehouse.getItemLocation(item));
        }

        //calculate a path for the robot through the warehouse visiting all locations
        PathFinder pathFinder = new PathFinder();
        List<Path> shortestPath = pathFinder.findShortestPath(warehouse, locationsToVisit);

        //send this path to the visualization tool
        showVisualisation(warehouse, shortestPath, locationsToVisit);
    }
    
    protected void showVisualisation(Warehouse warehouse, List<Path> shortestPath, ArrayList<Point> locationsToVisit) {
        SwingUtilities.invokeLater(() -> {
            this.remove(visualisationPanel);
            this.add(new VisualizationTool(warehouse, shortestPath, locationsToVisit));
            this.invalidate();
            this.revalidate();
        });
    }
}
